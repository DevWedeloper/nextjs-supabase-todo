create table "public"."todo" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "task" text not null,
    "due_date" timestamp with time zone,
    "completed" boolean not null default false,
    "last_edited" timestamp with time zone default now()
);


CREATE UNIQUE INDEX todo_pkey ON public.todo USING btree (id);

alter table "public"."todo" add constraint "todo_pkey" PRIMARY KEY using index "todo_pkey";

alter table "public"."todo" add constraint "chk_due_date_after_created_at" CHECK ((due_date >= created_at)) not valid;

alter table "public"."todo" validate constraint "chk_due_date_after_created_at";

alter table "public"."todo" add constraint "task_not_null" CHECK ((task IS NOT NULL)) not valid;

alter table "public"."todo" validate constraint "task_not_null";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_last_edited()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin    
    new.last_edited = now();
    return new;
end;$function$
;

grant delete on table "public"."todo" to "anon";

grant insert on table "public"."todo" to "anon";

grant references on table "public"."todo" to "anon";

grant select on table "public"."todo" to "anon";

grant trigger on table "public"."todo" to "anon";

grant truncate on table "public"."todo" to "anon";

grant update on table "public"."todo" to "anon";

grant delete on table "public"."todo" to "authenticated";

grant insert on table "public"."todo" to "authenticated";

grant references on table "public"."todo" to "authenticated";

grant select on table "public"."todo" to "authenticated";

grant trigger on table "public"."todo" to "authenticated";

grant truncate on table "public"."todo" to "authenticated";

grant update on table "public"."todo" to "authenticated";

grant delete on table "public"."todo" to "service_role";

grant insert on table "public"."todo" to "service_role";

grant references on table "public"."todo" to "service_role";

grant select on table "public"."todo" to "service_role";

grant trigger on table "public"."todo" to "service_role";

grant truncate on table "public"."todo" to "service_role";

grant update on table "public"."todo" to "service_role";

CREATE TRIGGER update_last_edited_trigger BEFORE UPDATE ON public.todo FOR EACH ROW EXECUTE FUNCTION update_last_edited();


